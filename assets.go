// Code generated by go-bindata.
// sources:
// assets/index.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x3b\x79\x53\xdb\xba\xbe\x7f\x27\x9f\x42\x75\xef\x6d\x9c\x17\xb2\xa7\x14\x08\xc9\x0c\xd0\x8d\x6e\x70\x0b\xed\x59\xda\xbe\x8e\x63\x2b\xb1\x8a\x6d\xb9\x92\x4c\x08\xe7\xf0\xdd\xdf\x68\xb1\x2d\x2f\x09\x09\xd0\xf3\xe6\xa6\xd3\xc4\x96\x7e\xfb\xee\x85\xfd\x47\xcf\x4f\x8e\xce\xff\x38\x7d\x01\x5c\xe6\x7b\xe3\xea\xbe\xfc\x01\x00\x80\x7d\x17\x5a\x8e\x3c\x14\xa7\x3e\x64\x16\xb0\x5d\x8b\x50\xc8\x46\xc6\xa7\xf3\x97\xcd\x1d\x43\xdb\x66\x88\x79\x70\x7c\xe6\xe2\x88\x01\xca\xa2\xe9\xf4\xd1\x7e\x5b\xae\xa5\x30\x1e\x0a\x2e\x92\x33\xfe\x21\xd0\x1b\x19\x94\x2d\x3c\x48\x5d\x08\x99\x91\xd9\x74\x09\x9c\x8e\x0c\x97\xb1\x90\xee\xb5\xdb\xbe\x75\x65\x3b\x41\x6b\x82\x31\xa3\x8c\x58\x21\x3f\xb1\xb1\xdf\x4e\x16\xda\xfd\x56\xbf\xf5\xac\x6d\x53\x9a\xae\xb5\x7c\x14\xb4\x6c\x4a\xb3\x84\x51\xc0\xe0\x8c\x20\xb6\x18\x19\xd4\xb5\xfa\x3b\x83\xe6\xe1\xe7\x3f\x10\x3a\x3b\x7e\x09\xdf\x76\x9d\x57\xfe\x9b\x8f\x07\x17\x0b\x3b\x7a\x7d\xf0\xfa\xe3\xac\xdf\x3b\xf1\x3f\xd9\xf3\xf9\x33\x1c\xf4\x3f\xfe\xe1\xcc\x06\x9f\xad\xc6\xa9\x7f\x76\x4e\xaf\xdb\x6f\xb7\x77\x2e\x27\xce\x8b\x1f\xee\x20\xca\xd2\xb7\x09\xa6\x14\x13\x34\x43\xc1\xc8\xb0\x02\x1c\x2c\x7c\x1c\x51\x63\x5c\x4d\x2d\x21\x74\x1e\x57\xab\xd5\xea\xff\x80\xbf\xc4\x72\x68\x39\x0e\x0a\x66\x7b\xa0\x33\x14\xe7\xbe\x45\x66\x28\x10\xa7\x37\xd5\xea\x04\x3b\x8b\xdb\x01\x85\xd5\x20\x9a\xb9\x6c\x0f\x74\x3b\x9d\x4b\x57\x2e\xcd\x91\xc3\x5c\xb1\xf2\xef\xfc\xc2\xe5\x5c\xae\x4c\x2c\xfb\x62\x46\x70\x14\x38\x4d\x1b\x7b\x98\xec\x81\xc7\xb6\xed\x38\xd3\xa9\xe0\xde\x72\x91\xe3\xc0\x40\x09\x70\x89\x28\x9a\x20\x0f\xb1\xc5\x1e\x90\x1b\x12\xc8\xc6\x01\xb3\x50\x00\xc9\xaf\x12\x94\x33\x99\x62\xe2\x37\x29\x9a\x05\x28\x16\xc7\xb7\xae\x9a\x0a\xae\xdf\xef\x84\x57\xc3\x2c\xf3\xee\xd3\x78\x29\xe1\x0f\xac\x88\xe1\x22\x39\xfd\xa4\xc9\x83\x1f\x05\xb3\xad\x1c\x88\xed\x42\xfb\x62\x82\xaf\x12\xde\x9c\x64\x73\x82\x19\xc3\x3e\x97\x93\xf3\x2a\xd0\xcd\x21\x4d\x71\xc0\x9a\x73\xa5\x7d\x80\x89\x6f\x79\xcb\x84\xe1\x26\x25\xd8\x8b\x0d\x8a\x29\x62\x08\x07\x7b\x3c\x6f\x2c\x86\x2e\x61\xd6\x92\x52\x2d\xbe\xd2\x9c\xc3\xc9\x05\x62\xcd\x09\xbe\x6a\x52\x74\x2d\x0c\x31\xc1\xc4\x81\x84\x2f\x0d\xe3\x38\x6c\xfa\xf8\xfa\x36\x18\xf1\x59\x05\x93\x5a\x3a\x31\xbe\xd0\x90\xa2\x6b\xb8\x07\xba\xdb\xa5\x26\xd1\xb5\xdb\x9b\x62\x3b\xa2\x4a\xc7\xeb\x26\x0a\x1c\x78\xb5\x07\x7a\x45\x2c\x14\x84\x11\xfb\xc2\x16\x21\x1c\x19\x0c\x5e\x31\xe3\x5b\xb9\x1b\x9a\xdd\x58\x90\x44\x56\xbe\xd1\x24\xdc\x4c\x4d\x62\x39\x28\xa2\x49\x18\x66\x41\x3c\x38\xcd\x40\xac\x12\x21\xb4\x28\x9d\x63\xe2\x2c\x13\x23\xb5\x87\xe2\xc1\x70\x58\x60\x90\xdb\x2e\x88\x78\x53\xad\x3e\xf6\x21\xa5\x30\x98\x25\x89\x95\xda\xa8\xb3\x34\x7b\x5f\xee\xbe\x3c\x7c\xf9\x32\x97\x69\xdb\x69\x7a\x24\xa1\x34\x45\x57\xd0\x89\xe5\x90\x82\x77\x96\x64\x63\x2e\x81\x13\xc7\xf7\xf2\x59\x27\xb4\xe4\xeb\xff\xce\x2e\x13\x29\x47\xb2\x9e\x09\x53\xd7\x72\xf0\x7c\x0f\x74\xc2\x2b\xf1\xff\x69\x9f\x7f\x85\x57\x80\xcc\x26\x96\xd9\xd9\x12\xff\x5a\xbd\x7a\x49\xf0\x6e\x8a\x99\x86\xf4\xda\x98\x49\x1c\xe4\x7d\x91\x53\x4d\x56\x9b\x12\x68\x1e\xaf\x16\x81\xd6\x2f\x8f\x58\xd9\x56\x65\xf2\x05\x38\x80\xa5\xd2\x3c\xa6\x30\x70\x0e\x59\xf0\x0f\x04\xae\x35\x83\xf4\x1d\xa2\x2c\x67\x2f\x86\xc3\x3d\x90\x96\xeb\x24\xa4\xbb\x9d\x35\x02\x54\x0b\x64\x19\x69\x0a\x49\x10\x8d\x6d\x20\x1d\xa2\xce\xf0\x25\x24\x53\x8f\xfb\x3a\x2d\x92\x1b\x04\x2b\x57\xc6\xb2\xb9\x3c\x71\x9d\xf2\x51\x10\x77\x9d\x6e\x6f\x75\x5a\xe5\x54\x55\x74\x07\x45\xdd\x7b\xaa\xe0\x28\xb3\x65\x9d\xa3\xeb\x56\xd2\xdc\xca\x4a\x40\x9c\xff\xca\x4d\xb1\x73\x52\xf7\xc6\x90\xbd\x9d\xed\xce\x6e\x67\x75\x4e\x3e\xd5\xfe\x67\xd2\xa3\x73\x5b\x4e\xae\x85\x59\x9a\x93\xab\x31\x85\xa9\xe8\xec\x3b\x0a\xa6\x58\x6f\xad\x32\xf6\xa9\x6f\x79\x5e\x0a\xc4\xf3\xaf\x08\xe4\x59\x64\x06\x87\x65\x39\xa0\xda\x56\x32\xb0\xb5\xe3\x89\x4d\x9e\xc9\xd9\x58\x9e\xf0\xd9\x4c\x1b\x72\x1d\x74\x09\x90\x33\x32\x3c\x3c\x43\xc1\x4b\x4c\x7c\x03\xd8\x9e\x45\xe9\xc8\x48\x06\x24\x6d\x6e\x16\x28\x3c\x3b\x63\x20\xad\xdb\xe4\xc0\x04\xa8\xdb\x2b\x01\x8c\xa7\x15\x63\xfc\x1b\xf4\x6c\xec\xc3\xfd\xb6\xdb\x2b\x41\xf6\xac\x09\xf4\xc0\x14\x93\x91\x21\x1a\xd9\x27\x0a\x49\x60\xf9\x30\x91\x90\x92\x26\x0e\xbc\x85\x31\x8e\x77\xf6\xdb\x02\xa7\x84\x96\x20\x00\xb4\x66\x2c\x94\x2e\x27\xab\x77\x7b\x03\x84\x9e\x65\x43\x17\x7b\x0e\x24\x23\x23\x85\x25\xf0\x67\x84\x08\x74\x44\x86\x8a\x91\x60\x0d\x0d\x4e\xe3\x1e\x5c\xd0\x20\xde\x59\x4f\x83\xa4\x97\xa7\x5a\x14\x48\xaf\xd0\x22\x85\x8d\xb5\x28\xe1\x97\x09\x8c\x43\x16\x24\x84\x27\x2c\x00\x13\x16\x34\xbd\x99\xf8\x09\x09\xf2\x2d\xb2\x10\xc7\x13\x0f\xdb\x17\x86\x12\x92\x46\x13\x1f\x31\x63\x7c\x86\x66\x7c\x12\xd9\x6f\x3b\xe8\x32\x17\x49\x6d\x2e\xa4\x16\x8c\x12\xa4\x18\x9c\x56\x18\x16\xc3\x52\x4d\xf3\xf9\xe8\x8c\x71\x92\xf6\x51\x16\x97\x85\x10\x5e\x05\x2d\x30\x92\x8e\x28\x68\xd3\xd9\xb9\x08\xa2\x52\x5b\x13\x3c\xa7\x23\xa3\x6f\x8c\xf7\xdb\x31\xd6\x12\xa2\xb1\xac\xaa\xbf\x15\x4c\x7c\xbb\x6d\xf9\x05\x6c\x89\x65\xcb\xac\xab\x59\xb8\x54\x08\xd5\x31\xca\xcc\xa5\xc5\x02\x8e\xd8\x7a\x92\x96\xab\xfc\x4e\x50\x00\xfb\x34\xb4\x02\x41\x72\xee\x62\xcb\x47\x09\x3d\x6e\x34\xbe\x57\xa6\x4e\x49\xfc\x2c\xd7\x46\x6f\xe6\xfa\xb5\x6c\x09\x5e\x1c\x76\xda\xf5\xae\x4d\x50\xc8\x32\x38\x94\xd8\xe9\xd5\xbd\x8d\x1d\xd8\xfa\xf1\x33\x82\x64\x21\xae\xea\xe5\x61\xb3\xdf\xea\xb6\x3a\xe2\x22\xfe\xc7\xca\x6b\xf8\xde\xd3\xed\xa6\x7d\x14\xc1\xc3\x8f\xdb\x47\x74\x71\x30\x68\xef\xd2\xeb\xf0\x74\x4a\x7e\xef\xd3\xc1\xee\xfb\xdd\xcb\x4f\x9f\x9e\x1e\xce\x18\x7a\xf3\xa3\xb3\x3d\x67\x6d\x3a\x5a\xf3\x7a\x3d\xd5\x47\xca\x3f\x5e\x5f\xa1\x75\x6f\x57\xfc\xc8\xdf\xad\x58\xad\x68\x7f\x67\xd0\x3c\xb7\x9f\x1e\xff\x07\x4d\x3a\xbd\x67\x3f\x2f\x17\x3f\xce\xde\x4f\x5f\xff\x38\x79\x6f\xbd\xbb\x98\x46\xbf\x7d\xbe\xfa\xf3\xea\xd3\x69\x70\xf4\xe6\xe0\x99\xd7\xf3\x8f\x7e\xfb\x70\x1c\xbe\xda\xf5\x5f\x1d\x3d\xdf\x99\xbf\xfa\x70\x6c\x9f\x3e\x7f\x76\x7e\x65\x3d\x94\xf2\xe3\xea\x34\x0a\x44\x88\x03\x91\x35\x66\x1d\xfc\x55\xad\xd4\x22\x0a\x01\x65\x04\xd9\xac\x36\xac\x56\xda\x6d\xe6\x22\xda\xb2\x42\x04\x46\xa0\xc6\xad\xb3\xd7\x6e\x77\x7b\xcf\x5a\x9d\x56\xa7\xd5\xdd\xdb\xe9\xec\x74\xda\x56\x88\xda\x35\x35\x2b\x69\xc0\x5f\xbe\x7c\x69\x1d\x9c\x1e\x7f\xfb\xf6\xad\x36\xac\xa6\xbb\x11\x85\x84\x6f\xeb\x18\xbc\x7c\xab\xb5\x6a\x45\xac\x38\x70\x12\xcd\xc0\x08\x4c\x2d\x8f\x42\x1d\xdd\xc3\xb3\x19\x74\x8e\x83\x74\xaf\x12\xaf\xa3\xe0\x14\x06\xbc\x8f\x96\xe1\xf1\x8a\xf2\x5e\xa6\xc0\x0a\x28\x0f\x51\xa6\xa0\x68\x11\x4c\xe3\xc4\x57\x95\xf5\x4c\xae\xd1\x16\xe0\x3a\x6c\x01\xdb\xf2\x3c\x3e\xcb\x9d\xbc\x4d\x8f\x3f\x9c\xbc\xad\xab\xd9\x45\x44\xc4\x14\x98\x45\x91\xff\xfe\x3b\xab\x9f\x70\x46\xa5\x42\x20\x8b\x48\x30\xac\x56\x2a\x37\xd5\x6a\xa5\x54\x55\x46\xa2\x58\x87\xbc\x91\xf9\xcf\x30\xbb\xa3\x4c\xcd\x7f\xf2\x48\xbe\x75\x01\x3f\xc2\x9f\x11\xa4\xcc\xe4\xbc\x6b\xaf\x5e\x9c\xd7\xb6\xc4\x91\x2c\x4a\x6d\x79\x96\x28\x4e\xa1\x37\xdd\xe2\x57\x2b\x21\x0e\x28\xd4\x75\x4c\xa2\x33\x31\x47\x1e\x78\x58\x80\xe5\x00\xba\x7b\xa5\x5e\x95\x4a\xa5\x12\xef\x94\x38\xb8\x52\xa9\xdc\xdc\x55\xa8\x0f\x65\x52\xad\xcb\xaf\x56\xab\x56\x2a\x1c\xfe\x26\x17\x9d\xbc\x9a\x6b\xc1\x11\x33\xd3\x05\x29\xcb\x83\xb2\x5c\xc8\xac\x17\x03\x3f\xaf\x8f\x50\x46\x19\xf6\x26\x09\x57\x2d\xf0\x75\xb9\x54\x3b\x58\x19\xb1\x95\x4a\x12\xab\xc5\xf4\x29\x09\xd0\x4a\x81\x63\x21\x4a\x15\x48\x21\xd4\x4e\x4f\xce\xe2\x58\xe3\xd7\x03\xc4\xb7\xb8\x94\xb7\x07\x5c\xe2\xae\x55\xf9\xbd\x49\x54\xae\x13\x50\xf7\x62\xba\x2c\xea\x24\x57\xe5\x96\xd2\xd8\xd2\x6a\x53\x59\x84\x2d\x29\x39\xa9\x0f\x4b\x8a\xdb\x72\x27\x6a\xc0\x6b\x3b\x31\xad\x17\x77\xf3\xe1\xca\xea\xfb\xcb\x9c\x78\x27\xae\xab\xbd\x18\x17\x87\x38\x13\x13\x1f\xce\x20\x2b\xcb\x45\x3a\x3b\x76\x6e\xc9\xc4\x8d\x2c\x0e\x1a\x40\xd0\x04\x0d\x50\x6b\xd7\xc0\x43\x56\xed\x5f\x51\x70\xcb\x8d\x26\x55\xb6\x09\xb4\x58\xac\x74\xb6\x80\x31\x17\x3b\x5b\x20\x22\x9e\xb4\xd0\xa5\x45\xc0\x95\xcb\x6b\x6a\x00\xe7\xe0\xf7\xf7\xef\x5e\x33\x16\xc6\xd6\x12\x8c\x78\x26\xd4\xe6\x88\xb9\x47\x04\x3a\x30\x60\xc8\xf2\x68\x0d\xa0\x80\xa3\xa9\x90\xb8\x72\x49\x0b\x87\x30\x43\x7e\x4b\xc4\xbd\xa0\x70\x03\xa0\x47\xa1\x6c\xe1\x8b\x10\xe2\x29\xf8\xfd\x39\xf6\x2d\x14\xc4\x02\x3e\x1a\x8d\x40\x2d\x0a\x1c\x38\x45\x01\x74\x6a\x29\xd5\x58\xac\x0c\xb8\x14\xab\x94\xa9\xce\x4e\xa7\x11\x79\x9e\xcc\xd3\xd8\xb8\x1c\x99\x42\xa6\x28\xbe\x86\x96\x03\x89\x69\x1c\x44\xcc\xc5\x04\x5d\x8b\x80\x30\xb6\x80\x71\x68\x51\x64\x03\x03\x34\xc0\xa1\x45\xe1\xf6\xa0\x05\x03\x3e\xb4\x9b\x69\x2f\x6a\x00\x63\x8f\xef\x27\x5d\xa8\x2e\x64\x90\xb5\x81\xb3\x51\x05\xa9\x10\x8a\x65\x5e\xe1\x0b\x4b\x23\x7a\x0b\x38\x16\xb3\x52\xaf\x45\xc4\xe3\xc5\x25\x9e\x1d\x1b\x02\x7b\x98\x71\x69\x31\x16\x0a\xc6\xe2\x4e\x79\x94\x7a\x12\x4d\xcd\x74\x92\xac\x83\xbf\x80\x8d\x03\x8a\x3d\xc8\x1b\xa9\x59\x3b\x3a\xf9\x78\x06\x02\xcc\x00\x8d\xc2\x10\x13\xc6\x7d\x35\x04\x37\x25\x23\x17\x97\x81\x07\xad\x12\x82\xaf\x0b\x7f\x05\x1e\xb6\x1c\x5d\xf5\x94\xaf\x29\x7c\xc2\x2c\x16\xd1\x7a\x8b\xe1\x33\x46\x50\x30\x33\xeb\x5f\x3a\xdf\x64\x7c\xf4\xe2\xb8\xa8\x14\x33\x43\x58\x46\x66\x85\xe6\xfc\x4a\x21\x25\x39\x8b\x38\x8b\xf8\xa5\x77\x06\x93\xcb\x2e\xea\xb4\x94\x14\x12\x82\x49\x46\x54\x41\x54\x67\xce\x55\xd3\x48\xa4\xd8\xbc\xc5\x99\xf1\xfa\x8d\xb8\x21\xc7\x2d\x22\x83\x08\x8c\xc0\x5f\xd5\x6a\xbb\x0d\x42\x82\x2e\x2d\x06\x41\x48\x70\x08\x09\x5b\x54\xbf\x5f\xc0\xc5\x19\x23\x60\x0f\x18\x07\x87\x47\xcf\x5f\xbc\x7c\xf5\xfa\xf8\xcd\xdb\x77\xef\x3f\x9c\x9c\xfe\xe7\xe3\xd9\xf9\xa7\xcf\xbf\xfd\xfe\xc7\x9f\xd6\xc4\x76\xe0\x74\xe6\xa2\x1f\x17\x9e\x1f\xe0\xf0\x27\xa1\x2c\xba\x9c\x5f\x2d\xae\x3b\xdd\x5e\x7f\xf0\x74\xfb\xd9\xce\x6e\xa3\x3d\x32\xb6\x24\x8f\x68\xe2\x21\x1b\x48\xb7\x83\x29\x26\x40\x84\x30\x0a\x66\x55\x19\xcb\x60\x2f\xd1\x10\x98\xe2\x1e\x50\x5c\x8c\xb8\xc4\x38\x62\xa1\x18\xcd\x0c\x63\x98\x2c\xda\x2e\xe9\x6e\xf1\xef\x9e\xf8\xee\x6f\x71\x9a\x5d\xf1\xdd\x13\xdf\x72\x65\x90\x62\xf0\x4b\x9b\x8e\x2a\xe9\xf2\x0e\xd4\x28\xce\xa8\xef\x11\x9b\xee\x7c\x57\x79\x25\xf9\x2b\xc0\xb9\x8b\x3c\x08\x4c\x04\xf6\x25\x4e\xcb\x83\xc1\x8c\xb9\x5c\xbc\x74\x8a\x73\x49\x17\x8c\xd4\xbe\xed\x5a\xe4\x08\x3b\xf0\x80\x99\xa8\xd1\xd0\x86\x65\x2e\xea\x5a\x50\xfd\xe5\x50\x09\x18\xd7\x15\x8c\x24\xe7\xf1\x18\xf4\x86\xfa\x0e\x67\x63\x9a\x62\xef\x09\xe8\xd7\xc1\xfe\x3e\x18\xd4\xc1\xdf\xc0\x14\x22\x8c\xc7\x60\x50\xcf\xc0\xf7\x63\xf8\x1e\x78\x02\xba\x4f\x05\x42\x2f\x46\xe8\x73\x84\xed\x2c\xc2\x40\xb2\xee\x83\x27\x60\xbb\xaf\x49\xc5\xf3\x18\xd1\x0f\xd6\x07\x41\xac\x9e\x6f\x28\x8a\x95\x22\xb0\x3d\x48\x69\x6a\xc5\x39\xc1\xef\x97\xe1\x17\x10\x53\xe6\x49\x94\xa8\x83\x46\x76\x08\x57\x61\x2d\x6c\x7a\xc0\x4c\x6e\xc0\x7a\x5c\x32\x8b\x7b\xbd\xfa\xed\xf8\xfd\x15\xf8\x83\xd8\x59\x4a\x40\x55\x8a\xa5\x68\xc3\xea\xcd\xb2\xbc\x70\xa0\xca\x0b\x71\xf0\x10\x79\x91\xee\xdc\x25\x3f\x64\x1c\x12\x28\xee\xb9\x9a\xed\x2f\xff\x7b\xd0\xfc\xd3\x6a\x5e\x77\x9a\xbb\x5f\x1b\x5f\xdb\x5f\x47\xdf\xda\xb3\x2d\x60\x18\x9b\x64\x8b\x0a\xdd\x8c\xe1\xc4\x63\x98\x93\xa9\x99\x86\xbd\x0a\xf9\x7a\x21\xb0\xef\x82\xd7\xbf\x23\xde\x60\x13\xbc\x7c\x39\x10\x21\x96\xa6\x92\x10\x3f\x97\x7b\xaa\x24\x98\x72\x33\xc9\xbd\x41\x8c\x20\x72\xaf\x57\xac\x0e\xa6\xdc\x8c\x93\x7b\x9b\xc3\x4b\x5f\x2e\xcf\x06\x20\x7b\x59\x6b\x4a\xb0\x7f\xa4\xea\x8a\xa8\x11\xf5\x5c\x02\x0b\xd2\x8f\x78\x9a\xe5\xf3\x6f\x6d\x9a\xba\xc8\x37\x79\xe2\x83\x7b\x12\xef\xd7\x0b\xe9\xaf\x7e\x12\x12\x99\xaa\x2e\x33\xc9\x94\x9b\xb1\xb2\xb9\x7c\x4c\x12\x52\x35\x43\x2d\x23\xc5\xeb\x56\x69\xbf\xd2\x3b\x45\x26\x3b\xa9\x90\x36\xd6\x4a\x9e\x81\x91\x3a\x48\x33\xe8\x2b\xf9\x1a\xb4\x67\x5b\xc6\xd7\xc0\xa8\xa7\xa9\x17\xb1\xa9\x78\x4c\x26\x53\x59\x3d\x2b\x23\xc0\xe4\x7b\x81\x48\x4b\x10\x80\xfd\x98\x98\x4c\xaa\x21\x08\x1a\x8d\x4c\x66\x89\xf4\x4f\x79\x6a\xdd\x23\xc8\x3b\xd9\x06\xfb\xa0\xdb\xdb\xc9\x3b\x21\x96\xa3\x31\x2a\xb7\x7e\xa9\x5f\x55\xe9\x36\x4d\x1b\x8c\x41\xb7\xf7\xac\x0e\x9e\x3c\x91\x1c\x7a\x9d\xc1\x4e\xa1\x8a\xdf\xc2\x83\x53\x19\xcb\x90\xee\xee\xe6\x1f\x53\xde\x8e\xcb\x3b\x92\xc0\xed\xed\x2c\x17\xf6\x0e\x02\x75\x45\x16\xf7\x7a\x83\x0d\x25\x4a\xd4\x29\x17\xec\x7e\x4a\x95\x74\x18\x45\x6c\x78\x6b\x44\x27\x9d\x46\xcf\x92\x4c\x44\x2b\x52\x7a\xc7\x49\xc2\x5a\xef\x38\xaa\x6f\xe8\x11\x28\x87\x93\x9e\xd6\x50\x54\x67\x00\xbc\x35\x28\xc2\x2a\x8e\x41\x76\x96\x02\xa3\x64\x5f\x1f\x7f\xd6\x0c\x60\x25\xe0\x1a\xf1\x2b\x08\x35\x1a\xb7\x07\xf4\x6e\x57\x0b\xe8\xde\xa0\x10\xcf\x42\xcd\x32\x91\x1b\xdd\x1c\xbb\xd5\xc2\x49\x47\xf7\xbb\x69\x49\x37\x45\x53\xd8\xee\xd7\xf3\x62\x73\x12\xbd\x35\xa3\x7b\x7d\xf1\x44\x9b\x2c\x85\xcc\xa7\xe1\x3a\x8a\xa8\x5e\x26\xf3\xc6\x4c\x54\xd1\x94\xeb\x2f\x57\xae\x7f\x4b\x94\x4b\x01\xc4\x25\xcd\x8d\xfe\xb0\x6b\xf9\x03\x13\x9d\x85\x88\x64\x75\x55\xaf\x9e\x9f\x0c\xb3\x4f\xd5\xfe\x65\xd6\x1e\xc7\x0f\x8b\x6b\xf5\x96\xed\x21\xfb\xc2\xd4\xaf\xc1\x40\xee\x23\x8a\xb8\xbc\x2d\xfc\x2f\xd3\x78\x9c\x7d\x18\x5f\x6f\x5d\x5a\x9e\x59\x72\xdf\x9c\x63\xa9\x9b\xc6\x09\x56\xf2\x40\x7b\x29\x96\x7a\x8c\x60\x16\x36\xf8\x47\x3c\xd1\x28\xdd\x11\x4f\x39\x4a\x77\x36\xb8\x1f\x94\x1a\xc8\x78\x9c\xbe\x66\x51\x6f\x59\x8e\x73\xe4\x59\x94\x9a\x86\x7a\x92\x5d\x22\xb7\x8e\x6b\x85\xa1\x51\x6f\x11\xe8\xe3\x4b\xb8\x11\xa2\x7a\xc6\x5a\x6f\xf1\x28\x35\x57\x3c\x93\x88\x3f\xc2\x33\xa1\x63\x31\xf8\x19\xc1\xb9\x7e\x29\x2d\xee\xb9\xaf\xd0\x11\x24\x4f\x36\xb4\xdb\x8c\xe5\x56\xd7\x3f\x77\xb0\x66\x5e\x5e\xce\x10\x8c\xc0\x9b\xb3\x93\x0f\xad\xd0\x22\x14\xae\xa3\xa8\xfe\xe1\x15\x52\x12\x91\xf7\x9d\xd6\x65\x0e\x92\x14\x5b\x0b\xfc\x66\x2d\xa8\x64\x92\x91\x8d\x42\xb4\x00\x2e\x5c\x32\xc7\x20\x39\xc7\xac\x2b\xa0\xf0\x49\x7a\x3b\xf6\x76\x8f\xe8\x1f\xce\xf8\x0b\xfa\x56\x9e\x08\x4b\x35\xb8\x9f\x4b\xf5\x0f\xb7\x83\x4f\x67\xf7\xf2\x6e\x9e\x9e\xcb\x7c\x0f\x8c\x40\x4d\xbc\x30\xa0\x5e\x3e\x50\x4f\x23\x0c\xfd\x05\x82\xef\xea\xee\x72\x0b\x89\xdb\xcb\xc6\xb8\xb6\x31\x3b\xc5\x4a\xfc\x34\x72\x1c\xd5\xbb\x5e\xc6\x38\x66\x13\xbf\x4d\xc7\x01\xc5\x7b\x09\x0f\xce\x0f\x05\x53\xfc\x00\x6a\xc4\x82\x22\x67\x4f\xbd\xce\xa1\xf3\x70\x52\x8d\xa4\xe1\xd4\x6b\x1d\xe0\x6f\x70\x6f\xce\x21\xa6\x0c\x3a\x60\xb2\x28\x61\x6c\x45\xcc\x4d\x59\xab\x1b\xbd\x0f\xc9\x9c\x17\xc5\x12\xbe\x7c\x39\xe5\xcb\xcf\x74\xbe\xf7\xf7\xe1\x03\x85\x82\x20\x13\x7f\x4f\xc8\x1d\x28\xf2\x2e\xaf\xbf\x5b\x53\xab\xb7\xac\x30\x84\x81\x63\x72\x26\x77\x4c\x46\xe8\x41\x1f\x06\xbc\x7c\x3b\xd8\x8e\xf8\x21\xaf\x55\x2f\xe4\xea\xe1\xe2\xd8\x31\x6b\x59\x9e\x9b\xb3\x51\x2c\x5a\xd4\x26\xd8\xf3\xce\x71\x08\x46\xb9\xb5\xd7\xe2\xbd\xf3\xcd\x28\xdf\xfc\xbf\xd5\xc4\xcc\xed\xfd\x00\x5f\x6c\x6a\x93\xf5\xda\x10\xff\xac\x49\xf8\x76\x82\x6b\x18\xeb\x9e\x06\xba\x8b\x51\x56\xcb\xbd\x82\xc0\xcd\xf2\xad\x74\x76\xd2\x5f\x52\x28\x10\x78\xb0\xc9\x72\x5d\xbd\x8b\xba\xe6\x00\x6f\x96\x0c\xf5\xf2\xad\xbf\xb5\xa6\xfa\xf8\xad\x90\xf2\x11\x63\xed\x41\x32\x3f\x2c\xdf\x61\xec\x95\xf3\xf2\x66\x53\x76\xa1\xb8\x41\x3f\x64\x8b\xb2\x2b\x0a\x70\x67\x7b\xaa\xb7\x3d\xd7\xbe\x46\x92\xa3\x0f\xd7\x28\x7e\xef\x74\xc5\x65\x8e\xf6\x8e\x46\xb9\x07\x7c\x3a\x7b\xb0\xb8\x53\xd2\x1d\x3b\x1b\x8f\x66\x1b\xcd\xa3\xf2\x85\x81\x95\x20\xf7\x28\x1c\xf7\x9d\x2e\x7f\xf1\x34\xf9\xab\xa7\xc7\x07\x9a\x16\xff\xb9\xe9\xf0\x1f\x9d\x06\xff\x99\xe9\xef\x8e\xd3\xde\xfd\xa7\xbb\x7b\x4f\x73\xbf\x68\x7a\x7b\x98\x69\xed\x96\x81\xe3\x1e\x35\x63\xd3\x41\x63\xf9\x90\xf1\xdf\x35\x1b\xc4\xc7\xd9\x9b\x86\xfb\x6d\xf9\x47\x45\xfb\x6d\xf9\xf7\xf8\xff\x17\x00\x00\xff\xff\xea\xaf\xc3\x76\xa7\x3f\x00\x00")

func assetsIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexTmpl,
		"assets/index.tmpl",
	)
}

func assetsIndexTmpl() (*asset, error) {
	bytes, err := assetsIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.tmpl", size: 16295, mode: os.FileMode(420), modTime: time.Unix(1474639260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.tmpl": assetsIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.tmpl": &bintree{assetsIndexTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

